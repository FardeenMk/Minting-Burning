// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract CryptoToken is ERC20, Ownable {

    constructor() ERC20("CryptoToken", "CTK") Ownable(msg.sender) {}

    function mint(address recipient, uint256 value) external onlyOwner {
        require(value > 0, "Mint value must be greater than 0");
        _mint(recipient, value);
    }

    function burn(uint256 value) external {
        require(value > 0, "Burn value must be greater than 0");
        require(value <= balanceOf(_msgSender()), "Insufficient balance to burn");
        _burn(_msgSender(), value);
    }

    function transfer(address to, uint256 value) public override returns (bool) {
        require(value > 0, "Transfer value must be greater than 0");
        require(value <= balanceOf(_msgSender()), "Insufficient balance for transfer");
        _transfer(_msgSender(), to, value);
        return true;
    }
}
